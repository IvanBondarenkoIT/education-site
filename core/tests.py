from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth.models import User
from django.utils.translation import activate
from .models import (
    Language, BusinessValue, TrainingProgram, 
    JobInstruction, CoffeeInfo
)


class BaseTestCase(TestCase):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –æ–±—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.client = Client()
        
        # –°–æ–∑–¥–∞–µ–º —è–∑—ã–∫–∏
        self.ru_language = Language.objects.create(
            code='ru',
            name='–†—É—Å—Å–∫–∏–π',
            flag_icon='üá∑üá∫',
            is_active=True,
            is_default=True,
            order=1
        )
        
        self.uk_language = Language.objects.create(
            code='uk',
            name='–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
            flag_icon='üá∫üá¶',
            is_active=True,
            is_default=False,
            order=2
        )
        
        # –°–æ–∑–¥–∞–µ–º –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–∏
        self.business_value = BusinessValue.objects.create(
            situation='–¢–µ—Å—Ç–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è',
            business_value='–¢–µ—Å—Ç–æ–≤–∞—è –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç—å',
            category='competence',
            order=1
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è
        self.training_program = TrainingProgram.objects.create(
            title='–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è',
            content='–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
            period_type='day',
            period_number=1,
            order=1
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        self.job_instruction = JobInstruction.objects.create(
            position='manager',
            department='management',
            title='–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
            content='–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
            order=1
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ñ–µ
        self.coffee_info = CoffeeInfo.objects.create(
            category='beans',
            title='–¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ñ–µ',
            content='–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ –∫–æ—Ñ–µ',
            order=1
        )


class HomePageTest(BaseTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    
    def test_home_page_loads(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"""
        response = self.client.get(reverse('core:home'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'home.html')
    
    def test_home_page_context(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        response = self.client.get(reverse('core:home'))
        self.assertIn('page_title', response.context)
        self.assertIn('stats', response.context)
        self.assertEqual(response.context['page_title'], 'Dim Kava - –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç–∞–ª')
    
    def test_home_page_stats(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        response = self.client.get(reverse('core:home'))
        stats = response.context['stats']
        self.assertIn('business_values_count', stats)
        self.assertIn('job_instructions_count', stats)
        self.assertIn('coffee_info_count', stats)
        self.assertIn('languages_count', stats)


class BusinessValuesTest(BaseTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π"""
    
    def test_business_values_page_loads(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"""
        response = self.client.get(reverse('core:business_values'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'business_values.html')
    
    def test_business_values_context(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π"""
        response = self.client.get(reverse('core:business_values'))
        self.assertIn('page_title', response.context)
        self.assertIn('business_values', response.context)
        self.assertIn('categories', response.context)
        self.assertIn('total_count', response.context)
        self.assertEqual(response.context['page_title'], '–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏')
    
    def test_business_values_data(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π"""
        response = self.client.get(reverse('core:business_values'))
        business_values = response.context['business_values']
        self.assertEqual(business_values.count(), 1)
        self.assertEqual(business_values.first(), self.business_value)


class TrainingProgramTest(BaseTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è"""
    
    def test_training_program_page_loads(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"""
        response = self.client.get(reverse('core:training_program'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'training/training_program.html')
    
    def test_training_program_context(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è"""
        response = self.client.get(reverse('core:training_program'))
        self.assertIn('page_title', response.context)
        self.assertIn('daily_programs', response.context)
        self.assertIn('weekly_programs', response.context)
        self.assertIn('monthly_programs', response.context)
        self.assertEqual(response.context['page_title'], '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
    
    def test_training_program_data(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è"""
        response = self.client.get(reverse('core:training_program'))
        daily_programs = response.context['daily_programs']
        self.assertEqual(daily_programs.count(), 1)
        self.assertEqual(daily_programs.first(), self.training_program)
    
    def test_training_detail_page_loads(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"""
        response = self.client.get(
            reverse('core:training_detail', args=[self.training_program.id])
        )
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'training/training_detail.html')
    
    def test_training_detail_context(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è"""
        response = self.client.get(
            reverse('core:training_detail', args=[self.training_program.id])
        )
        self.assertIn('page_title', response.context)
        self.assertIn('program', response.context)
        self.assertEqual(response.context['program'], self.training_program)


class JobInstructionsTest(BaseTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    
    def test_job_instructions_page_loads(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"""
        response = self.client.get(reverse('core:job_instructions'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'instructions/job_instructions.html')
    
    def test_job_instructions_context(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
        response = self.client.get(reverse('core:job_instructions'))
        self.assertIn('page_title', response.context)
        self.assertIn('instructions', response.context)
        self.assertIn('departments', response.context)
        self.assertIn('total_count', response.context)
        self.assertEqual(response.context['page_title'], '–î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    
    def test_job_instructions_data(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
        response = self.client.get(reverse('core:job_instructions'))
        instructions = response.context['instructions']
        self.assertEqual(instructions.count(), 1)
        self.assertEqual(instructions.first(), self.job_instruction)
    
    def test_job_instruction_detail_page_loads(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"""
        response = self.client.get(
            reverse('core:job_instruction_detail', args=[self.job_instruction.id])
        )
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'instructions/job_instruction_detail.html')
    
    def test_job_instruction_detail_context(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
        response = self.client.get(
            reverse('core:job_instruction_detail', args=[self.job_instruction.id])
        )
        self.assertIn('page_title', response.context)
        self.assertIn('instruction', response.context)
        self.assertEqual(response.context['instruction'], self.job_instruction)


class CoffeeInfoTest(BaseTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ñ–µ"""
    
    def test_coffee_info_page_loads(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ñ–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"""
        response = self.client.get(reverse('core:coffee_info'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'coffee_info/coffee_info.html')
    
    def test_coffee_info_context(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ñ–µ"""
        response = self.client.get(reverse('core:coffee_info'))
        self.assertIn('page_title', response.context)
        self.assertIn('coffee_info_list', response.context)
        self.assertIn('categories', response.context)
        self.assertIn('total_count', response.context)
        self.assertEqual(response.context['page_title'], '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ñ–µ –∏ –∑–µ—Ä–Ω–µ')
    
    def test_coffee_info_data(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ñ–µ"""
        response = self.client.get(reverse('core:coffee_info'))
        coffee_info_list = response.context['coffee_info_list']
        self.assertEqual(coffee_info_list.count(), 1)
        self.assertEqual(coffee_info_list.first(), self.coffee_info)
    
    def test_coffee_info_detail_page_loads(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ñ–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"""
        response = self.client.get(
            reverse('core:coffee_info_detail', args=[self.coffee_info.id])
        )
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'coffee_info/coffee_info_detail.html')
    
    def test_coffee_info_detail_context(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ñ–µ"""
        response = self.client.get(
            reverse('core:coffee_info_detail', args=[self.coffee_info.id])
        )
        self.assertIn('page_title', response.context)
        self.assertIn('coffee_info', response.context)
        self.assertEqual(response.context['coffee_info'], self.coffee_info)


class LanguageSwitchingTest(BaseTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤"""
    
    def test_set_language_view(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º view –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞"""
        response = self.client.post(reverse('core:set_language'), {
            'language': 'uk'
        })
        self.assertEqual(response.status_code, 302)  # Redirect
    
    def test_language_context_processor(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —è–∑—ã–∫–æ–≤"""
        response = self.client.get(reverse('core:home'))
        self.assertIn('current_language', response.context)
        self.assertIn('available_languages', response.context)
        self.assertIn('languages', response.context)


class ErrorPagesTest(BaseTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –æ—à–∏–±–æ–∫"""
    
    def test_404_page(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º 404 —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        response = self.client.get('/non-existent-page/')
        self.assertEqual(response.status_code, 404)
        self.assertTemplateUsed(response, 'errors/404.html')
    
    def test_500_page(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º 500 —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ 500 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        response = self.client.get('/non-existent-page/')
        self.assertEqual(response.status_code, 404)


class URLPatternsTest(BaseTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è URL –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    
    def test_all_urls_resolve(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ URL –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–∑—Ä–µ—à–∞—é—Ç—Å—è"""
        urls_to_test = [
            'core:home',
            'core:business_values',
            'core:training_program',
            'core:job_instructions',
            'core:coffee_info',
            'core:set_language',
        ]
        
        for url_name in urls_to_test:
            try:
                reverse(url_name)
            except Exception as e:
                self.fail(f"URL {url_name} –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è: {e}")
    
    def test_detail_urls_resolve(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–∞–∑—Ä–µ—à–∞—é—Ç—Å—è"""
        detail_urls = [
            ('core:training_detail', self.training_program.id),
            ('core:job_instruction_detail', self.job_instruction.id),
            ('core:coffee_info_detail', self.coffee_info.id),
        ]
        
        for url_name, obj_id in detail_urls:
            try:
                reverse(url_name, args=[obj_id])
            except Exception as e:
                self.fail(f"URL {url_name} —Å id {obj_id} –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è: {e}")


class ModelTest(BaseTestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π"""
    
    def test_business_value_str(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ BusinessValue"""
        self.assertIn('–¢–µ—Å—Ç–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è', str(self.business_value))
    
    def test_training_program_str(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ TrainingProgram"""
        self.assertIn('–î–µ–Ω—å 1', str(self.training_program))
    
    def test_job_instruction_str(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ JobInstruction"""
        self.assertIn('–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞', str(self.job_instruction))
    
    def test_coffee_info_str(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ CoffeeInfo"""
        self.assertIn('–¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ñ–µ', str(self.coffee_info))
    
    def test_language_str(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ Language"""
        self.assertEqual(str(self.ru_language), 'üá∑üá∫ –†—É—Å—Å–∫–∏–π (ru)')


class IntegrationTest(BaseTestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    def test_full_navigation_flow(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–∞–π—Ç—É"""
        # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        response = self.client.get(reverse('core:home'))
        self.assertEqual(response.status_code, 200)
        
        # –ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–∏
        response = self.client.get(reverse('core:business_values'))
        self.assertEqual(response.status_code, 200)
        
        # –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è
        response = self.client.get(reverse('core:training_program'))
        self.assertEqual(response.status_code, 200)
        
        # –î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        response = self.client.get(reverse('core:job_instructions'))
        self.assertEqual(response.status_code, 200)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ñ–µ
        response = self.client.get(reverse('core:coffee_info'))
        self.assertEqual(response.status_code, 200)
    
    def test_detail_pages_flow(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–æ–∫ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è
        response = self.client.get(
            reverse('core:training_detail', args=[self.training_program.id])
        )
        self.assertEqual(response.status_code, 200)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        response = self.client.get(
            reverse('core:job_instruction_detail', args=[self.job_instruction.id])
        )
        self.assertEqual(response.status_code, 200)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ñ–µ
        response = self.client.get(
            reverse('core:coffee_info_detail', args=[self.coffee_info.id])
        )
        self.assertEqual(response.status_code, 200)
