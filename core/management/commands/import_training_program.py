from django.core.management.base import BaseCommand
from django.conf import settings
from core.models import TrainingProgram
import csv
import os
import re


class Command(BaseCommand):
    help = '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è –∏–∑ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º'
        )

    def handle(self, *args, **options):
        if options['clear']:
            TrainingProgram.objects.all().delete()
            self.stdout.write('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã')

        csv_file = 'data/processed/final_training_program_data.csv'
        
        if not os.path.exists(csv_file):
            self.stdout.write(
                self.style.ERROR(f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file}')
            )
            return

        created_count = 0
        
        try:
            with open(csv_file, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                
                for row in reader:
                    title = row.get('title', '').strip()
                    content = row.get('content', '').strip()
                    filename = row.get('filename', '').strip()
                    
                    if not title or not content:
                        self.stdout.write(
                            self.style.WARNING(f'–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –ø—É—Å—Ç—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º')
                        )
                        continue
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞ –∏ –Ω–æ–º–µ—Ä
                    period_type, period_number = self.parse_period_info(title)
                    
                    # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    clean_content = self.clean_and_format_content(content)
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                    training_program, created = TrainingProgram.objects.get_or_create(
                        title=title,
                        defaults={
                            'period_type': period_type,
                            'period_number': period_number,
                            'content': clean_content,
                            'order': period_number,
                            'is_active': True
                        }
                    )
                    
                    if created:
                        self.stdout.write(
                            f'‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è: {title}'
                        )
                        created_count += 1
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                        training_program.period_type = period_type
                        training_program.period_number = period_number
                        training_program.content = clean_content
                        training_program.save()
                        self.stdout.write(
                            f'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è: {title}'
                        )

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}')
            )
            return

        self.stdout.write(
            self.style.SUCCESS(
                f'‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π'
            )
        )

    def parse_period_info(self, title):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞ –∏ –Ω–æ–º–µ—Ä –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        title_lower = title.lower()
        
        if '–¥–µ–Ω—å' in title_lower:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è
            day_match = re.search(r'(\d+)\s*–¥–µ–Ω—å', title_lower)
            if day_match:
                return 'day', int(day_match.group(1))
            return 'day', 1
        
        elif '–Ω–µ–¥–µ–ª–∏' in title_lower:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
            week_match = re.search(r'(\d+)\s*–Ω–µ–¥–µ–ª–∏', title_lower)
            if week_match:
                return 'week', int(week_match.group(1))
            return 'week', 1
        
        elif '–º–µ—Å—è—Ü–∞' in title_lower:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
            month_match = re.search(r'(\d+)\s*–º–µ—Å—è—Ü–∞', title_lower)
            if month_match:
                return 'month', int(month_match.group(1))
            return 'month', 1
        
        else:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            return 'month', 99

    def clean_and_format_content(self, content):
        """–û—á–∏—â–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç"""
        if not content:
            return ''
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        content = re.sub(r'\n\s*\n', '\n\n', content)
        content = re.sub(r' +', ' ', content)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        content = content.strip()
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ HTML —Ç–µ–≥–∏
        lines = content.split('\n')
        formatted_lines = []
        
        for line in lines:
            line = line.strip()
            if line:
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏)
                if re.match(r'^\d+\.', line):
                    formatted_lines.append(f'<h3>{line}</h3>')
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                elif line.startswith('‚Ä¢'):
                    formatted_lines.append(f'<li>{line[1:].strip()}</li>')
                else:
                    formatted_lines.append(f'<p>{line}</p>')
        
        return '\n'.join(formatted_lines)
