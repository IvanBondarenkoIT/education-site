from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.conf import settings
import os
from pathlib import Path


class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä —Å fallback –Ω–∞ –∏–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–æ–≤'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π'
        )
        parser.add_argument(
            '--fixtures-dir',
            type=str,
            default='core/fixtures',
            help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∏–∫—Å—Ç—É—Ä–∞–º–∏'
        )
        parser.add_argument(
            '--fallback',
            action='store_true',
            help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –∏–º–ø–æ—Ä—Ç –µ—Å–ª–∏ —Ñ–∏–∫—Å—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        )

    def handle(self, *args, **options):
        clear = options['clear']
        fixtures_dir = Path(options['fixtures_dir'])
        fallback = options['fallback']

        self.stdout.write('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä...')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä
        all_data_fixture = fixtures_dir / 'all_data.json'
        
        if all_data_fixture.exists():
            self.stdout.write(f'‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ–∏–∫—Å—Ç—É—Ä–∞: {all_data_fixture}')
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if clear:
                self.clear_all_data()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä—ã
            try:
                call_command('loaddata', 'all_data', verbosity=0)
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä—ã!')
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.print_statistics()
                return
                
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–∫—Å—Ç—É—Ä—ã: {e}')
                )
                if not fallback:
                    return
        else:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è  –§–∏–∫—Å—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {all_data_fixture}')
            )
            if not fallback:
                self.stdout.write(
                    self.style.ERROR('‚ùå Fallback –æ—Ç–∫–ª—é—á–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π: python manage.py export_fixtures')
                )
                return

        # Fallback: –∏–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–æ–≤
        if fallback:
            self.stdout.write('\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º fallback –∏–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–æ–≤...')
            try:
                call_command('import_all_data', clear=clear)
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Fallback –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.print_statistics()
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                self.stdout.write('\nüì¶ –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—ã –∏–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
                call_command('export_fixtures', clear=True)
                
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ fallback –∏–º–ø–æ—Ä—Ç–∞: {e}')
                )
                self.show_manual_instructions()

    def clear_all_data(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥–µ–ª–µ–π"""
        from core.models import Language, BusinessValue, TrainingProgram, JobInstruction, CoffeeInfo
        
        self.stdout.write('üóëÔ∏è  –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...')
        
        models = [Language, BusinessValue, TrainingProgram, JobInstruction, CoffeeInfo]
        
        for model in models:
            count = model.objects.count()
            if count > 0:
                model.objects.all().delete()
                self.stdout.write(f'‚úÖ –û—á–∏—â–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –∏–∑ {model.__name__}')

    def print_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        from core.models import Language, BusinessValue, TrainingProgram, JobInstruction, CoffeeInfo
        
        self.stdout.write('\n' + '='*50)
        self.stdout.write('–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –î–ê–ù–ù–´–•:')
        self.stdout.write('='*50)
        
        models = [
            ('Languages', Language),
            ('Business Values', BusinessValue),
            ('Training Programs', TrainingProgram),
            ('Job Instructions', JobInstruction),
            ('Coffee Info', CoffeeInfo),
        ]
        
        total_records = 0
        for name, model in models:
            count = model.objects.count()
            total_records += count
            status = '‚úÖ' if count > 0 else '‚ùå'
            self.stdout.write(f'{status} {name}: {count} –∑–∞–ø–∏—Å–µ–π')
        
        self.stdout.write('='*50)
        self.stdout.write(f'–ò–¢–û–ì–û: {total_records} –∑–∞–ø–∏—Å–µ–π')
        self.stdout.write('='*50)
        
        if total_records == 59:
            self.stdout.write(
                self.style.SUCCESS('üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
            )
        else:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è  –û–∂–∏–¥–∞–ª–æ—Å—å 59 –∑–∞–ø–∏—Å–µ–π, –∑–∞–≥—Ä—É–∂–µ–Ω–æ {total_records}')
            )

    def show_manual_instructions(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        self.stdout.write('\n' + '='*60)
        self.stdout.write('üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –†–£–ß–ù–û–ô –ù–ê–°–¢–†–û–ô–ö–ï:')
        self.stdout.write('='*60)
        
        self.stdout.write('\n1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:')
        self.stdout.write('   python manage.py import_all_data')
        
        self.stdout.write('\n2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã:')
        self.stdout.write('   python manage.py export_fixtures')
        
        self.stdout.write('\n3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω—ã:')
        self.stdout.write('   ls core/fixtures/')
        
        self.stdout.write('\n4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∏–∫—Å—Ç—É—Ä:')
        self.stdout.write('   python manage.py load_fixtures')
        
        self.stdout.write('\n5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –∞–¥–º–∏–Ω–∫–µ:')
        self.stdout.write('   http://127.0.0.1:8000/admin/')
        
        self.stdout.write('='*60)
