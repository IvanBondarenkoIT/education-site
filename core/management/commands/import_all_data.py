from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.conf import settings
from pathlib import Path


class Command(BaseCommand):
    help = '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ source'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º'
        )
        parser.add_argument(
            '--skip-business-values',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π'
        )
        parser.add_argument(
            '--skip-training',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è'
        )
        parser.add_argument(
            '--skip-instructions',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π'
        )
        parser.add_argument(
            '--skip-coffee',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ñ–µ'
        )

    def handle(self, *args, **options):
        self.stdout.write('–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...')
        
        # –ò–º–ø–æ—Ä—Ç –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π
        if not options['skip_business_values']:
            self.stdout.write('\n1. –ò–º–ø–æ—Ä—Ç –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π...')
            try:
                call_command('import_business_values', clear=options['clear'])
                self.stdout.write(self.style.SUCCESS('‚úì –ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã'))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π: {e}'))
        else:
            self.stdout.write('‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω –∏–º–ø–æ—Ä—Ç –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π')

        # –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è
        if not options['skip_training']:
            self.stdout.write('\n2. –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è...')
            try:
                call_command('import_training_program', clear=options['clear'])
                self.stdout.write(self.style.SUCCESS('‚úì –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞'))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è: {e}'))
        else:
            self.stdout.write('‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è')

        # –ò–º–ø–æ—Ä—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        if not options['skip_instructions']:
            self.stdout.write('\n3. –ò–º–ø–æ—Ä—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π...')
            try:
                call_command('import_job_instructions', clear=options['clear'])
                self.stdout.write(self.style.SUCCESS('‚úì –î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã'))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}'))
        else:
            self.stdout.write('‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π')

        # –ò–º–ø–æ—Ä—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ñ–µ
        if not options['skip_coffee']:
            self.stdout.write('\n4. –ò–º–ø–æ—Ä—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ñ–µ...')
            try:
                call_command('import_coffee_info', clear=options['clear'])
                self.stdout.write(self.style.SUCCESS('‚úì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ñ–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞'))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ñ–µ: {e}'))
        else:
            self.stdout.write('‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω –∏–º–ø–æ—Ä—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ñ–µ')

        self.stdout.write('\n' + '='*50)
        self.stdout.write(self.style.SUCCESS('–ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!'))
        self.stdout.write('='*50)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.print_statistics()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.stdout.write('\nüì¶ –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—ã –∏–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
        try:
            call_command('export_fixtures', clear=True)
            self.stdout.write(self.style.SUCCESS('‚úÖ –§–∏–∫—Å—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω—ã!'))
        except Exception as e:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–∫—Å—Ç—É—Ä—ã: {e}')
            )
        
        self.stdout.write('\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:')
        self.stdout.write('1. –ó–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É: http://127.0.0.1:8000/admin/')
        self.stdout.write('2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        self.stdout.write('3. –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏')
        self.stdout.write('4. –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é views –∏ templates')

    def print_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        from core.models import BusinessValue, TrainingProgram, JobInstruction, CoffeeInfo
        
        self.stdout.write('\n' + '='*50)
        self.stdout.write('–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–ê:')
        self.stdout.write('='*50)
        
        models = [
            ('–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–∏', BusinessValue),
            ('–ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è', TrainingProgram),
            ('–î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', JobInstruction),
            ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ñ–µ', CoffeeInfo),
        ]
        
        total_records = 0
        for name, model in models:
            count = model.objects.count()
            total_records += count
            status = '‚úÖ' if count > 0 else '‚ùå'
            self.stdout.write(f'{status} {name}: {count} –∑–∞–ø–∏—Å–µ–π')
        
        self.stdout.write('='*50)
        self.stdout.write(f'–ò–¢–û–ì–û: {total_records} –∑–∞–ø–∏—Å–µ–π')
        self.stdout.write('='*50)
        
        if total_records >= 55:  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 55 –∑–∞–ø–∏—Å–µ–π
            self.stdout.write(
                self.style.SUCCESS('üéâ –ò–º–ø–æ—Ä—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!')
            )
        else:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è  –û–∂–∏–¥–∞–ª–æ—Å—å –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π, –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {total_records}')
            )
