from django.core.management.base import BaseCommand
from django.conf import settings
from core.models import JobInstruction
import csv
import os
import re


class Command(BaseCommand):
    help = '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º'
        )

    def handle(self, *args, **options):
        if options['clear']:
            JobInstruction.objects.all().delete()
            self.stdout.write('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã')

        csv_file = 'data/processed/final_job_instruction_data.csv'
        
        if not os.path.exists(csv_file):
            self.stdout.write(
                self.style.ERROR(f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file}')
            )
            return

        created_count = 0
        
        try:
            with open(csv_file, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                
                for row in reader:
                    title = row.get('title', '').strip()
                    content = row.get('content', '').strip()
                    filename = row.get('filename', '').strip()
                    
                    if not title or not content:
                        self.stdout.write(
                            self.style.WARNING(f'–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –ø—É—Å—Ç—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º')
                        )
                        continue
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –æ—Ç–¥–µ–ª
                    position, department = self.parse_position_info(title)
                    
                    # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    clean_content = self.clean_and_format_content(content)
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                    job_instruction, created = JobInstruction.objects.get_or_create(
                        title=title,
                        defaults={
                            'position': position,
                            'department': department,
                            'content': clean_content,
                            'order': 1,
                            'is_active': True
                        }
                    )
                    
                    if created:
                        self.stdout.write(
                            f'‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {title}'
                        )
                        created_count += 1
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                        job_instruction.position = position
                        job_instruction.department = department
                        job_instruction.content = clean_content
                        job_instruction.save()
                        self.stdout.write(
                            f'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {title}'
                        )

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}')
            )
            return

        self.stdout.write(
            self.style.SUCCESS(
                f'‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π'
            )
        )

    def parse_position_info(self, title):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –æ—Ç–¥–µ–ª –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        title_lower = title.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å
        if '–º–µ–Ω–µ–¥–∂–µ—Ä' in title_lower:
            position = 'manager'
        elif '–±–∞—Ä–∏—Å—Ç–∞' in title_lower or '—Å–∞–ª–æ–º–µ' in title_lower:
            position = 'barista'
        else:
            position = 'employee'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–¥–µ–ª
        if '–º–∞–≥–∞–∑–∏–Ω' in title_lower or 'horeca' in title_lower or '–æ–Ω–ª–∞–π–Ω' in title_lower:
            department = 'retail'
        elif '—Å–µ—Ä–≤–∏—Å' in title_lower:
            department = 'service'
        elif '–æ—Ñ–∏—Å' in title_lower or '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç' in title_lower:
            department = 'office'
        else:
            department = 'general'
        
        return position, department

    def clean_and_format_content(self, content):
        """–û—á–∏—â–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç"""
        if not content:
            return ''
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        content = re.sub(r'\n\s*\n', '\n\n', content)
        content = re.sub(r' +', ' ', content)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        content = content.strip()
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ HTML —Ç–µ–≥–∏
        lines = content.split('\n')
        formatted_lines = []
        
        for line in lines:
            line = line.strip()
            if line:
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏)
                if re.match(r'^\d+\.', line):
                    formatted_lines.append(f'<h3>{line}</h3>')
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                elif line.startswith('‚Ä¢'):
                    formatted_lines.append(f'<li>{line[1:].strip()}</li>')
                else:
                    formatted_lines.append(f'<p>{line}</p>')
        
        return '\n'.join(formatted_lines)
