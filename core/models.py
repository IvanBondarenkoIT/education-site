
from django.db import models
from django.utils.translation import gettext_lazy as _
from django.urls import reverse
from ckeditor.fields import RichTextField
from modeltranslation.translator import translator, TranslationOptions, register

# Create your models here.

class Page(models.Model):
    """–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å–∞–π—Ç–∞"""
    title = models.CharField(_('–ó–∞–≥–æ–ª–æ–≤–æ–∫'), max_length=200)
    slug = models.SlugField(_('URL'), max_length=200, unique=True)
    content = RichTextField(_('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ'), blank=True)
    created_at = models.DateTimeField(_('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'), auto_now_add=True)
    updated_at = models.DateTimeField(_('–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'), auto_now=True)
    is_active = models.BooleanField(_('–ê–∫—Ç–∏–≤–Ω–∞'), default=True)
    order = models.PositiveIntegerField(_('–ü–æ—Ä—è–¥–æ–∫'), default=0)
    
    class Meta:
        verbose_name = _('–°—Ç—Ä–∞–Ω–∏—Ü–∞')
        verbose_name_plural = _('–°—Ç—Ä–∞–Ω–∏—Ü—ã')
        ordering = ['order', 'title']
    
    def __str__(self):
        return self.title
    
    def get_absolute_url(self):
        return reverse('page_detail', kwargs={'slug': self.slug})


class BusinessValue(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ (33 –ø—É–Ω–∫—Ç–∞)"""
    CATEGORY_CHOICES = [
        ('competence', _('–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å')),
        ('leadership', _('–õ–∏–¥–µ—Ä—Å—Ç–≤–æ')),
        ('uniqueness', _('–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å')),
        ('team', _('–ö–æ–º–∞–Ω–¥–∞')),
        ('espresso_culture', _('–≠—Å–ø—Ä–µ—Å—Å–æ –∫—É–ª—å—Ç—É—Ä–∞')),
    ]
    
    situation = models.TextField(_('–°–∏—Ç—É–∞—Ü–∏—è'), help_text=_('–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏'))
    business_value = models.TextField(_('–ë–∏–∑–Ω–µ—Å —Ü–µ–Ω–Ω–æ—Å—Ç—å'), help_text=_('–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç–∏'))
    category = models.CharField(_('–ö–∞—Ç–µ–≥–æ—Ä–∏—è'), max_length=20, choices=CATEGORY_CHOICES)
    order = models.PositiveIntegerField(_('–ü–æ—Ä—è–¥–æ–∫'), default=0)
    is_active = models.BooleanField(_('–ê–∫—Ç–∏–≤–Ω–∞'), default=True)
    created_at = models.DateTimeField(_('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'), auto_now_add=True)
    updated_at = models.DateTimeField(_('–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'), auto_now=True)
    
    class Meta:
        verbose_name = _('–ë–∏–∑–Ω–µ—Å —Ü–µ–Ω–Ω–æ—Å—Ç—å')
        verbose_name_plural = _('–ë–∏–∑–Ω–µ—Å —Ü–µ–Ω–Ω–æ—Å—Ç–∏')
        ordering = ['category', 'order']
    
    def __str__(self):
        return f"{self.get_category_display()}: {self.situation[:50]}..."


class TrainingProgram(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    PERIOD_CHOICES = [
        ('day', _('–î–µ–Ω—å')),
        ('week', _('–ù–µ–¥–µ–ª—è')),
        ('month', _('–ú–µ—Å—è—Ü')),
    ]
    
    title = models.CharField(_('–ó–∞–≥–æ–ª–æ–≤–æ–∫'), max_length=200)
    content = RichTextField(_('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ'))
    period_type = models.CharField(_('–¢–∏–ø –ø–µ—Ä–∏–æ–¥–∞'), max_length=10, choices=PERIOD_CHOICES)
    period_number = models.PositiveIntegerField(_('–ù–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞'), help_text=_('–î–µ–Ω—å 1, –ù–µ–¥–µ–ª—è 2, –ú–µ—Å—è—Ü 3 –∏ —Ç.–¥.'))
    order = models.PositiveIntegerField(_('–ü–æ—Ä—è–¥–æ–∫'), default=0)
    is_active = models.BooleanField(_('–ê–∫—Ç–∏–≤–Ω–∞'), default=True)
    created_at = models.DateTimeField(_('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'), auto_now_add=True)
    updated_at = models.DateTimeField(_('–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'), auto_now=True)
    
    class Meta:
        verbose_name = _('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è')
        verbose_name_plural = _('–ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è')
        ordering = ['period_type', 'period_number', 'order']
        unique_together = ['period_type', 'period_number']
    
    def __str__(self):
        return f"{self.get_period_type_display()} {self.period_number}: {self.title}"
    
    def get_period_display(self):
        return f"{self.get_period_type_display()} {self.period_number}"


class JobInstruction(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    DEPARTMENT_CHOICES = [
        ('management', _('–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç')),
        ('barista', _('–ë–∞—Ä–∏—Å—Ç–∞')),
        ('cashier', _('–ö–∞—Å—Å–∏—Ä')),
        ('kitchen', _('–ö—É—Ö–Ω—è')),
        ('cleaning', _('–£–±–æ—Ä–∫–∞')),
        ('delivery', _('–î–æ—Å—Ç–∞–≤–∫–∞')),
    ]
    
    POSITION_CHOICES = [
        ('manager', _('–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞')),
        ('senior_barista', _('–°—Ç–∞—Ä—à–∏–π –±–∞—Ä–∏—Å—Ç–∞')),
        ('barista', _('–ë–∞—Ä–∏—Å—Ç–∞')),
        ('cashier', _('–ö–∞—Å—Å–∏—Ä')),
        ('cook', _('–ü–æ–≤–∞—Ä')),
        ('cleaner', _('–£–±–æ—Ä—â–∏–∫')),
        ('delivery_driver', _('–í–æ–¥–∏—Ç–µ–ª—å –¥–æ—Å—Ç–∞–≤–∫–∏')),
    ]
    
    position = models.CharField(_('–î–æ–ª–∂–Ω–æ—Å—Ç—å'), max_length=50, choices=POSITION_CHOICES)
    department = models.CharField(_('–û—Ç–¥–µ–ª'), max_length=20, choices=DEPARTMENT_CHOICES)
    title = models.CharField(_('–ó–∞–≥–æ–ª–æ–≤–æ–∫'), max_length=200)
    content = RichTextField(_('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'))
    order = models.PositiveIntegerField(_('–ü–æ—Ä—è–¥–æ–∫'), default=0)
    is_active = models.BooleanField(_('–ê–∫—Ç–∏–≤–Ω–∞'), default=True)
    created_at = models.DateTimeField(_('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'), auto_now_add=True)
    updated_at = models.DateTimeField(_('–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'), auto_now=True)
    
    class Meta:
        verbose_name = _('–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
        verbose_name_plural = _('–î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
        ordering = ['department', 'position', 'order']
    
    def __str__(self):
        return f"{self.get_position_display()}: {self.title}"


class CoffeeInfo(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ñ–µ –∏ –∑–µ—Ä–Ω–µ"""
    CATEGORY_CHOICES = [
        ('beans', _('–ó–µ—Ä–Ω–æ')),
        ('roasting', _('–û–±–∂–∞—Ä–∫–∞')),
        ('brewing', _('–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ')),
        ('varieties', _('–°–æ—Ä—Ç–∞')),
        ('history', _('–ò—Å—Ç–æ—Ä–∏—è')),
        ('culture', _('–ö—É–ª—å—Ç—É—Ä–∞')),
    ]
    
    category = models.CharField(_('–ö–∞—Ç–µ–≥–æ—Ä–∏—è'), max_length=20, choices=CATEGORY_CHOICES)
    title = models.CharField(_('–ó–∞–≥–æ–ª–æ–≤–æ–∫'), max_length=200)
    content = RichTextField(_('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ'))
    image = models.ImageField(_('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'), upload_to='coffee_info/', blank=True, null=True)
    order = models.PositiveIntegerField(_('–ü–æ—Ä—è–¥–æ–∫'), default=0)
    is_active = models.BooleanField(_('–ê–∫—Ç–∏–≤–Ω–∞'), default=True)
    created_at = models.DateTimeField(_('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'), auto_now_add=True)
    updated_at = models.DateTimeField(_('–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'), auto_now=True)
    
    class Meta:
        verbose_name = _('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ñ–µ')
        verbose_name_plural = _('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ñ–µ')
        ordering = ['category', 'order']
    
    def __str__(self):
        return f"{self.get_category_display()}: {self.title}"


class Language(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞–º–∏ —Å–∞–π—Ç–∞"""
    code = models.CharField(_('–ö–æ–¥ —è–∑—ã–∫–∞'), max_length=5, unique=True, help_text=_('ru, uk, en, ge'))
    name = models.CharField(_('–ù–∞–∑–≤–∞–Ω–∏–µ'), max_length=50, help_text=_('–†—É—Å—Å–∫–∏–π, –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞, English, ·É•·Éê·É†·Éó·É£·Éö·Éò'))
    flag_icon = models.CharField(_('–ò–∫–æ–Ω–∫–∞ —Ñ–ª–∞–≥–∞'), max_length=20, help_text=_('üá∑üá∫, üá∫üá¶, üá¨üáß, üá¨üá™'))
    is_active = models.BooleanField(_('–ê–∫—Ç–∏–≤–µ–Ω'), default=True)
    is_default = models.BooleanField(_('–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'), default=False)
    order = models.PositiveIntegerField(_('–ü–æ—Ä—è–¥–æ–∫'), default=0)
    
    class Meta:
        verbose_name = _('–Ø–∑—ã–∫')
        verbose_name_plural = _('–Ø–∑—ã–∫–∏')
        ordering = ['order', 'name']
    
    def __str__(self):
        return f"{self.flag_icon} {self.name} ({self.code})"
    
    def save(self, *args, **kwargs):
        # –ï—Å–ª–∏ —ç—Ç–æ—Ç —è–∑—ã–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —è–∑—ã–∫–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ
        if self.is_default:
            Language.objects.filter(is_default=True).update(is_default=False)
        super().save(*args, **kwargs)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–µ–π
class PageTranslation(TranslationOptions):
    fields = ('title', 'content')

class BusinessValueTranslation(TranslationOptions):
    fields = ('situation', 'business_value')

class TrainingProgramTranslation(TranslationOptions):
    fields = ('title', 'content')

class JobInstructionTranslation(TranslationOptions):
    fields = ('title', 'content')

class CoffeeInfoTranslation(TranslationOptions):
    fields = ('title', 'content')


